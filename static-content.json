[
  {"key": "dashboard.html", "value": ""}
  {"key": "index.html", "value": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+RW50cnkgTG9nZ2VyPC90aXRsZT4KICAgIDxzdHlsZT4KICAgICAgICBib2R5IHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICAgICAgICBtYXgtd2lkdGg6IDgwMHB4OwogICAgICAgICAgICBtYXJnaW46IDAgYXV0bzsKICAgICAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICB9CiAgICAgICAgZm9ybSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgICAgIGdhcDogMTBweDsKICAgICAgICAgICAgbWF4LXdpZHRoOiA0MDBweDsKICAgICAgICB9CiAgICAgICAgaW5wdXQsIHNlbGVjdCwgYnV0dG9uIHsKICAgICAgICAgICAgcGFkZGluZzogOHB4OwogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgfQogICAgICAgIGJ1dHRvbiB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7CiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgfQogICAgICAgIGJ1dHRvbjpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0NWEwNDk7CiAgICAgICAgfQogICAgICAgIC5uYXYgewogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJuYXYiPgogICAgICAgIDxhIGhyZWY9Ii9kYXNoYm9hcmQuaHRtbCI+VmlldyBEYXNoYm9hcmQ8L2E+CiAgICA8L2Rpdj4KICAgIDxoMT5FbnRyeSBMb2dnZXI8L2gxPgogICAgPGZvcm0gaWQ9ImVudHJ5Rm9ybSI+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW50cnlfdHlwZSI+RW50cnkgVHlwZTo8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGlkPSJlbnRyeV90eXBlIiBuYW1lPSJlbnRyeV90eXBlIiByZXF1aXJlZD4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlRpY2tldCBBcnRpc3QiPlRpY2tldCBBcnRpc3Q8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlRpY2tldCBGcmVlIj5UaWNrZXQgRnJlZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iVGlja2V0IDUwIj5UaWNrZXQgNTA8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlRpY2tldCAxMDAiPlRpY2tldCAxMDA8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlRpY2tldCAxNTAiPlRpY2tldCAxNTA8L29wdGlvbj4KICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IlRpY2tldCAyMDAiPlRpY2tldCAyMDA8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGxhYmVsIGZvcj0icHJpY2UiPlByaWNlOjwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJwcmljZSIgbmFtZT0icHJpY2UiIHN0ZXA9IjAuMDEiIHJlcXVpcmVkPgogICAgICAgIDwvZGl2PgogICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0Ij5TdWJtaXQgRW50cnk8L2J1dHRvbj4KICAgIDwvZm9ybT4KCiAgICA8c2NyaXB0PgogICAgICAgIC8vIEZ1bmN0aW9uIHRvIHVwZGF0ZSBwcmljZSBiYXNlZCBvbiBzZWxlY3RlZCB0aWNrZXQgdHlwZQogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVByaWNlKCkgewogICAgICAgICAgICBjb25zdCBlbnRyeVR5cGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW50cnlfdHlwZScpLnZhbHVlOwogICAgICAgICAgICBjb25zdCBwcmljZUZpZWxkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaWNlJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBTZXQgcHJpY2UgYmFzZWQgb24gdGlja2V0IHR5cGUKICAgICAgICAgICAgc3dpdGNoKGVudHJ5VHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSAnVGlja2V0IEFydGlzdCc6CiAgICAgICAgICAgICAgICBjYXNlICdUaWNrZXQgRnJlZSc6CiAgICAgICAgICAgICAgICAgICAgcHJpY2VGaWVsZC52YWx1ZSA9ICcwJzsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJ1RpY2tldCA1MCc6CiAgICAgICAgICAgICAgICAgICAgcHJpY2VGaWVsZC52YWx1ZSA9ICc1MCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdUaWNrZXQgMTAwJzoKICAgICAgICAgICAgICAgICAgICBwcmljZUZpZWxkLnZhbHVlID0gJzEwMCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdUaWNrZXQgMTUwJzoKICAgICAgICAgICAgICAgICAgICBwcmljZUZpZWxkLnZhbHVlID0gJzE1MCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdUaWNrZXQgMjAwJzoKICAgICAgICAgICAgICAgICAgICBwcmljZUZpZWxkLnZhbHVlID0gJzIwMCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHByaWNlRmllbGQudmFsdWUgPSAnJzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBVcGRhdGUgcHJpY2Ugd2hlbiB0aWNrZXQgdHlwZSBjaGFuZ2VzCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VudHJ5X3R5cGUnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVQcmljZSk7CiAgICAgICAgCiAgICAgICAgLy8gVXBkYXRlIHByaWNlIG9uIHBhZ2UgbG9hZAogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB1cGRhdGVQcmljZSk7CiAgICAgICAgCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VudHJ5Rm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gewogICAgICAgICAgICAgICAgZW50cnlfdHlwZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VudHJ5X3R5cGUnKS52YWx1ZSwKICAgICAgICAgICAgICAgIHByaWNlOiBwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmljZScpLnZhbHVlKQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvbG9nLWVudHJ5JywgewogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0VudHJ5IGxvZ2dlZCBzdWNjZXNzZnVsbHkhJyk7CiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQucmVzZXQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gbG9nIGVudHJ5Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7CiAgICAgICAgICAgICAgICBhbGVydCgnRmFpbGVkIHRvIGxvZyBlbnRyeS4gUGxlYXNlIHRyeSBhZ2Fpbi4nKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo="}
]
